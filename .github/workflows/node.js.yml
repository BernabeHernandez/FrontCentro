name: CI/CD - Gamificaci贸n Ruleta

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

permissions:
  contents: write

jobs:
  pruebas-unitarias:
    name: Pruebas Unitarias
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - run: npm ci
      - name: Ejecutar pruebas unitarias
        run: npm test -- --testPathPattern="unit.test.jsx"
        env:
          NODE_ENV: test
          CI: true

  pruebas-integracion:
    name: Pruebas de Integraci贸n
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - run: npm ci
      - name: Ejecutar pruebas de integraci贸n
        run: npm test -- --testPathPattern="integration.test.jsx"
        env:
          NODE_ENV: test
          CI: true

  pruebas-e2e:
    name: Pruebas E2E (Cypress)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - run: npm ci

      - name: Build temporal para E2E (la misma que usaremos en deploy)
        run: npm run build
        env:
          CI: false

      - name: Verificar contenido del build
        run: |
          echo "Contenido de build:"
          ls -la build || true
          ls -R build || true

      - name: Instalar Cypress y serve
        run: npm install cypress@15.5.0 serve --save-dev

      - name: Ejecutar pruebas E2E
        uses: cypress-io/github-action@v6
        with:
          browser: chrome
          start: npx serve -s build -l 3000 --single
          wait-on: 'http://localhost:3000'
          wait-on-timeout: 600
          spec: cypress/e2e/gamificacion_ruleta.cy.js
        env:
          CI: true
          CYPRESS_baseUrl: http://localhost:3000

      - name: Subir capturas si falla Cypress
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: cypress-screenshots
          path: cypress/screenshots

      - name: Guardar build como artifact (para usar en build/deploy)
        if: ${{ success() }}
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: build/

  build:
    name: Build de Producci贸n (usando build del job E2E)
    runs-on: ubuntu-latest
    needs: [pruebas-unitarias, pruebas-integracion, pruebas-e2e]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - name: Descargar build generado por E2E
        uses: actions/download-artifact@v4
        with:
          name: build
          path: ./build
      - name: Verificar build descargado
        run: ls -R build || true

      - name: Re-subir build como artifact final (opcional)
        uses: actions/upload-artifact@v4
        with:
          name: build-final
          path: build/

  deploy:
    name: Deploy a Vercel (usando build pre-generado)
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Descargar build final
        uses: actions/download-artifact@v4
        with:
          name: build-final
          path: ./build

      - name: Verificar build antes del deploy
        run: ls -R build || true

      - name: Instalar CLI de Vercel
        run: npm install -g vercel

      - name: Deploy manual desde carpeta build (sin reconstruir)
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: vercel deploy --prebuilt --prod --yes --token=$VERCEL_TOKEN
